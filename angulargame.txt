 <div>
      <h1>Hex Color Guessing Game</h1>
      <p>Scoreboard: wins: {{ data.wins }} - Losses: {{ data.losses }}</p>
      <div
        class="backp"
        [ngStyle]="{ 'background-color': colorP }"
        [cheatDirective]="colorP"
      ></div>

      <button [disabled]="disBtn" (click)="handleColorChanges(colors[0])">
        {{ colors[0] }}</button
      >&nbsp; &nbsp;
      <button [disabled]="disBtn" (click)="handleColorChanges(colors[1])">
        {{ colors[1] }}</button
      >&nbsp;&nbsp;
      <button [disabled]="disBtn" (click)="handleColorChanges(colors[2])">
        {{ colors[2] }}</button
      >&nbsp;&nbsp;
      <div *ngIf="!display">
        <p>{{rest}}</p>
        <p>Resetting in {{countTime}} seconds...</p>
        <div></div>
      </div>
    </div>


export class AppComponent implements DoCheck, OnDestroy {
  data = { wins: 0, losses: 0 };
  lcdata = localStorage.getItem('@COLOR')

  display: boolean = true;
  rest!: string;
  disBtn = false;
  countTime: number = 5;
  settime!: any;
  setint!:ReturnType<typeof setInterval>;
  
  // countFc(): void {
  //   setInterval(() => {
  //     if(this.countTime < 0){
  //       clearInterval(this.setint);
  //     }
  //     this.countTime = this.countTime - 1;
  //   }, 1000);
  // }

  private generateRandomHexColor(): string {
    return (
      '#' + ((Math.random() * 0xffffff) << 0).toString(16).padStart(6, '0')
    );
  }

  colors: string[] = [
    this.generateRandomHexColor(),
    this.generateRandomHexColor(),
    this.generateRandomHexColor(),
  ];

  private getRandomItemFromArray(arr: string[]): string {
    return arr[Math.floor(Math.random() * arr.length)];
  }
  colorP = this.getRandomItemFromArray(this.colors);

  handleColorChanges(e: string) {
    this.countTime = 5;
   this.setint = setInterval(() => {
      if(this.countTime < 0){
        clearInterval(this.setint);
      }else{
        this.countTime = this.countTime - 1;
      }
      
    }, 1000);
    
    this.display = false;
    this.compare(e, this.colorP);
    this.disBtn = true;
    this.resetFc();
 
  }
  ngDoCheck(): void {
    this.getRandomItemFromArray(this.colors);
    clearInterval(this.setint)
  }
  resetFc(): void {
  if(this.lcdata){
this.data = JSON.parse(this.lcdata)
    }
    this.settime = setTimeout(() => {
      this.disBtn = false;
      this.display = true;
      this.colors = [
        this.generateRandomHexColor(),
        this.generateRandomHexColor(),
        this.generateRandomHexColor(),
      ];
      this.colorP = this.getRandomItemFromArray(this.colors);
      
    }, 5000);
    
  
  }
  compare(playColor: string, randColor: string) {
    if (playColor === randColor) {
      this.rest = "That's correct";
      this.data.wins = this.data.wins + 1;
    } else {
      this.data.losses = this.data.losses + 1;
      this.rest = `Wrong answer, the color is: ${this.colorP}`;
    }
    localStorage.setItem('@COLOR',JSON.stringify(this.data))
  }
  ngOnDestroy(): void {
    clearInterval(this.setint);
    clearTimeout(this.settime);

  }


cheatsheet
 @Input(`cheatDirective`) valuecl: string="##f86b6a";
  @HostListener('dblclick') message() {
   alert(this.valuecl);
  }